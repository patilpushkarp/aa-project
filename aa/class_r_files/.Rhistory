plot_str(df)
introduce(df)
plot_intro(df)
inspect_imb(df)
inspect_imb(df) %>% show_plot()
plot_bar(df)
ra.count <- data.frame(table(df$Rating.Agency))
names(ra.count) <- c("Rating Agency", "Number of Companies")
ra.count
barplot(table(df$Rating.Agency), main="Distribution of observations for Rating Agency", col="darkred", ylab="Companies Covered", las=2)
# Find data associated with ratings having less 10 observations
ratings.count.df <- data.frame(table(df$Rating))
rtl.data <- ratings.count.df[ratings.count.df$Freq<10,]
rtl.data
rating.table = table(df$Rating)
rating.table <- rating.table[order(rating.table)]
rating.barplot <- barplot(rating.table, main="Rating Distribution", ylab="Number of Companies", col="darkgreen", las=2)
text(x=rating.barplot, y= rating.table+30, labels=as.character(rating.table))
sector.table = table(df$Sector)
sector.table <- sector.table[order(sector.table)]
barplot(sector.table, main="Sector Distribution", xlab="Number of Companies", col="darkblue", las=2, horiz = TRUE)
plot_histogram(df)
colnames(df[,nearZeroVar(df)])
plot_boxplot(df, by='Rating')
plot_boxplot(df)
names(df)
boxplot(df[,c(10:25)])
?boxplot
boxplot(df[,c(10:25)], horizontal = FLASE)
boxplot(df[,c(10:25)], horizontal = FALSE)
boxplot(df[,c(10:25)], horizontal = TRUE)
boxplot(df[,c(10:25)], las=2)
library(knitr)
acc.df <- read.csv("./../data/classification_data/output/result_acc.csv")
pvv.df <- read.csv("./../data/classification_data/output/result_pvv.csv")
kable(acc.df)
kable(pvv.df)
colMeans(pvv.df[sapply(pvv.df, is.numeric)])
data.frame(colMeans(pvv.df[sapply(pvv.df, is.numeric)]))
# Load libraries
library(e1071)
library(caret)
library(knitr)
# Load helpers
source("./../helpers/helper.R")
# Read training and testing data
train <- read.csv("./../data/classification_data/intermediates/train.csv")
test <- read.csv("./../data/classification_data/intermediates/test.csv")
k.acc <- list()
ks <- c(3, 5, 9, 15, 23)
initial_accuracy <- 0
for (k in ks){
print(k)
knn.model <- knn3(as.factor(Rating)~., data=train, k=k)
result <- predict(knn.model, test, type="class")
sum(is.na(result))
sum(is.na(test$Rating))
accuracy <- mean(as.factor(result)==as.factor(test$Rating))
k.acc <- append(k.acc, accuracy)
print(accuracy)
if (initial_accuracy < accuracy){
initial_accuracy <- accuracy
chosen_k <- k
}
print("\n")
}
print(chosen_k)
# Retrain the model with chosen value of k
knn.model <- knn3(as.factor(Rating)~., data=train, k=chosen_k)
knn.model
# Use the new model for prediction
result <- predict(knn.model, test, type="class")
# Print the Confusion matrix
confusion.matrix <- confusionMatrix(as.factor(result), as.factor(test$Rating))
plot.custom.confusion.matrix(confusion.matrix$table)
# Print the accuracy stats of the model
kable(data.frame(confusion.matrix$overall))
# Print validation stats of the model
kable(data.frame(confusion.matrix$byClass))
# Save the results
algorithm <- "kNN"
save.class.acc.result(confusion.matrix$overall, algorithm)
save.class.pvv.result(confusion.matrix$byClass, algorithm)
plot(k, k.acc ,type = "o", col = "red", xlab = "Month", ylab = "Rain fall",
main = "Rain fall chart")
k
ks
ks
k.acc
plot(k, k.acc ,type = "o", col = "red", xlab = "Month", ylab = "Rain fall",
main = "Rain fall chart")
unlist(k.acc)
ks
k.acc <- unlist(k.acc)
plot(k, k.acc ,type = "o", col = "red", xlab = "Month", ylab = "Rain fall",
main = "Rain fall chart")
length(ks)
length(k.acc)
plot(k, k.acc ,type = "o", col = "red", xlab = "Month", ylab = "Rain fall",
main = "Rain fall chart")
plot(k, k.acc)
plot(k, k.acc)
length(ks)
length(k.acc)
plot(k, k.acc)
length(k.acc)
length(ks)
k.acc
plot(cbind(k, k.acc))
plot(k, k.acc)
k.df <- data.frame(k,k.acc)
k.df
plot(k.df$k, k.df$k.acc)
k.acc <- unlist(k.acc)
k.df <- data.frame(k,k.acc)
k.df
plot(k.df$k, k.df$k.acc)
plot(ks, k.acc)
plot(ks, k.acc, type="o")
plot(ks, k.acc, type="o", col="red")
plot(ks, k.acc, type="o", col="red", main="Accuracy for different values of K", xlab="Value of k", ylab="Accuracy of kNN model")
# Load libraries
library(randomForest)
library(caret)
library(knitr)
# Load helpers
source("./../helpers/helper.R")
# Read training and testing data
train <- read.csv("./../data/classification_data/intermediates/train.csv")
test <- read.csv("./../data/classification_data/intermediates/test.csv")
# Model Training
rf.model <- randomForest(as.factor(Rating)~., data=train)
# Load libraries
library(randomForest)
library(caret)
library(knitr)
# Load helpers
source("./../helpers/helper.R")
# Read training and testing data
train <- read.csv("./../data/classification_data/intermediates/train.csv")
test <- read.csv("./../data/classification_data/intermediates/test.csv")
# Model Training
rf.model <- randomForest(as.factor(Rating)~., data=train)
rf.model
# Predict the samples from test data using the model
result <- predict(rf.model, test, type="class")
# Print the Confusion matrix
confusion.matrix <- confusionMatrix(as.factor(result), as.factor(test$Rating))
plot.custom.confusion.matrix(confusion.matrix$table)
# Print the accuracy stats of the model
kable(data.frame(confusion.matrix$overall))
# Print validation stats of the model
kable(data.frame(confusion.matrix$byClass))
# Get the feature importances for each feature
kable(varImp(rf.model))
# Save the results
algorithm <- "Random.Forest"
save.class.acc.result(confusion.matrix$overall, algorithm)
save.class.pvv.result(confusion.matrix$byClass, algorithm)
# Load libraries
library(randomForest)
library(caret)
library(knitr)
# Load helpers
source("./../helpers/helper.R")
# Read training and testing data
train <- read.csv("./../data/classification_data/intermediates/train.csv")
test <- read.csv("./../data/classification_data/intermediates/test.csv")
# Model Training
rf.model <- randomForest(as.factor(Rating)~., data=train)
rf.model
# Predict the samples from test data using the model
result <- predict(rf.model, test, type="class")
# Print the Confusion matrix
confusion.matrix <- confusionMatrix(as.factor(result), as.factor(test$Rating))
plot.custom.confusion.matrix(confusion.matrix$table)
# Print the accuracy stats of the model
kable(data.frame(confusion.matrix$overall))
# Print validation stats of the model
kable(data.frame(confusion.matrix$byClass))
# Get the feature importances for each feature
kable(varImp(rf.model))
# Save the results
algorithm <- "Random.Forest"
save.class.acc.result(confusion.matrix$overall, algorithm)
save.class.pvv.result(confusion.matrix$byClass, algorithm)
# Load libraries
library(randomForest)
library(caret)
library(knitr)
# Load helpers
source("./../helpers/helper.R")
# Read training and testing data
train <- read.csv("./../data/classification_data/intermediates/train.csv")
test <- read.csv("./../data/classification_data/intermediates/test.csv")
# Remove indexes if present
if ("X.1" %in% names(train)){
train <- train[,-c("X.1")]
}
"X.1" %in% names(train)
# Read training and testing data
train <- read.csv("./../data/classification_data/intermediates/train.csv")
test <- read.csv("./../data/classification_data/intermediates/test.csv")
# Drop index columns
drops <- c("X.1", "X")
train <- train[, !(names(DF) %in% drops)]
# Read training and testing data
train <- read.csv("./../data/classification_data/intermediates/train.csv")
test <- read.csv("./../data/classification_data/intermediates/test.csv")
# Drop index columns
drops <- c("X.1", "X")
train <- train[, !(names(train) %in% drops)]
test <- test[, !(names(test) %in% drops)]
# Load libraries
library(randomForest)
library(caret)
library(knitr)
# Load helpers
source("./../helpers/helper.R")
# Read training and testing data
train <- read.csv("./../data/classification_data/intermediates/train.csv")
test <- read.csv("./../data/classification_data/intermediates/test.csv")
# Drop index columns
drops <- c("X.1", "X")
train <- train[, !(names(train) %in% drops)]
test <- test[, !(names(test) %in% drops)]
# Model Training
rf.model <- randomForest(as.factor(Rating)~., data=train)
rf.model
# Predict the samples from test data using the model
result <- predict(rf.model, test, type="class")
# Print the Confusion matrix
confusion.matrix <- confusionMatrix(as.factor(result), as.factor(test$Rating))
plot.custom.confusion.matrix(confusion.matrix$table)
# Print the accuracy stats of the model
kable(data.frame(confusion.matrix$overall))
# Print validation stats of the model
kable(data.frame(confusion.matrix$byClass))
# Get the feature importances for each feature
kable(varImp(rf.model))
# Save the results
algorithm <- "Random.Forest"
save.class.acc.result(confusion.matrix$overall, algorithm)
save.class.pvv.result(confusion.matrix$byClass, algorithm)
# Plot feature importance
varImp.df <- data.frame(varImp(rf.model))
varImp.df
barplot(varImp.df$Overall)
barplot(varImp.df$Overall, names.arg = varImp.df[,c(1)])
rownames(varImp.df)
barplot(varImp.df$Overall, names.arg=rownames(varImp.df))
barplot(varImp.df$Overall, names.arg=rownames(varImp.df), las=2)
# Plot feature importance
varImp.df <- data.frame(varImp(rf.model))
varImp.df <- varImp.df[order(varImp.df$Overall, decreasing = FALSE)]
varImp.df
varImp.df <- varImp.df[order(varImp.df$Overall, decreasing = FALSE)]
# Plot feature importance
varImp.df <- data.frame(varImp(rf.model))
varImp.df <- varImp.df[order(varImp.df$Overall, decreasing = FALSE)]
```{r}
# Plot feature importance
varImp.df <- data.frame(varImp(rf.model))
varImp.df <- varImp.df[order(varImp.df$Overall, decreasing = FALSE)]
barplot(varImp.df$Overall, names.arg=rownames(varImp.df), las=2)
# Plot feature importance
varImp.df <- data.frame(varImp(rf.model))
varImp.df <- varImp.df[order(varImp.df$Overall, decreasing = FALSE)]
varImp.df <- varImp.df[order(varImp.df$Overall, decreasing = FALSE)]
# Plot feature importance
varImp.df <- data.frame(varImp(rf.model))
varImp.df
varImp.df <- varImp.df[order(varImp.df$Overall, decreasing = FALSE)]
varImp.df <- varImp.df[order(varImp.df[,c(1)], decreasing = FALSE)]
barplot(varImp.df$Overall, names.arg=rownames(varImp.df), las=2)
varImp.df$Overall
varImp.df <- varImp.df[order(varImp.df$Overall, decreasing = FALSE),]
barplot(varImp.df$Overall, names.arg=rownames(varImp.df), las=2)
# Plot feature importance
varImp.df <- data.frame(varImp(rf.model))
varImp.df <- varImp.df[order(varImp.df$Overall, decreasing = FALSE),]
barplot(varImp.df$Overall, names.arg=rownames(varImp.df), las=2)
# Plot feature importance
varImp.df <- data.frame(varImp(rf.model))
varImp.df$Overall <- varImp.df[order(varImp.df$Overall, decreasing = FALSE),]
barplot(varImp.df$Overall, names.arg=rownames(varImp.df), las=2)
# Plot feature importance
varImp.df <- data.frame(varImp(rf.model))
varImp.df$Overall <- varImp.df[order(varImp.df$Overall, decreasing = FALSE),]
par(mar=c(3,3,3,0))
barplot(varImp.df$Overall, names.arg=rownames(varImp.df), las=2)
# Plot feature importance
varImp.df <- data.frame(varImp(rf.model))
varImp.df$Overall <- varImp.df[order(varImp.df$Overall, decreasing = FALSE),]
par(mar=c(5,5,5,0))
barplot(varImp.df$Overall, names.arg=rownames(varImp.df), las=2)
# Plot feature importance
varImp.df <- data.frame(varImp(rf.model))
varImp.df$Overall <- varImp.df[order(varImp.df$Overall, decreasing = FALSE),]
par(mar=c(7,7,7,0))
barplot(varImp.df$Overall, names.arg=rownames(varImp.df), las=2)
# Plot feature importance
varImp.df <- data.frame(varImp(rf.model))
varImp.df$Overall <- varImp.df[order(varImp.df$Overall, decreasing = FALSE),]
par(mar=c(10,10,10,0))
barplot(varImp.df$Overall, names.arg=rownames(varImp.df), las=2)
# Plot feature importance
varImp.df <- data.frame(varImp(rf.model))
varImp.df$Overall <- varImp.df[order(varImp.df$Overall, decreasing = FALSE),]
par(mar=c(10,10,0,0))
barplot(varImp.df$Overall, names.arg=rownames(varImp.df), las=2)
# Plot feature importance
varImp.df <- data.frame(varImp(rf.model))
varImp.df$Overall <- varImp.df[order(varImp.df$Overall, decreasing = FALSE),]
par(mar=c(10,10,2,0))
barplot(varImp.df$Overall, names.arg=rownames(varImp.df), las=2)
# Plot feature importance
varImp.df <- data.frame(varImp(rf.model))
varImp.df$Overall <- varImp.df[order(varImp.df$Overall, decreasing = FALSE),]
par(mar=c(10,2,2,0))
barplot(varImp.df$Overall, names.arg=rownames(varImp.df), las=2)
# Plot feature importance
varImp.df <- data.frame(varImp(rf.model))
varImp.df$Overall <- varImp.df[order(varImp.df$Overall, decreasing = FALSE),]
par(mar=c(10,3,3,0))
barplot(varImp.df$Overall, names.arg=rownames(varImp.df), las=2)
# Plot feature importance
varImp.df <- data.frame(varImp(rf.model))
varImp.df$Overall <- varImp.df[order(varImp.df$Overall, decreasing = FALSE),]
par(mar=c(15,3,3,0))
barplot(varImp.df$Overall, names.arg=rownames(varImp.df), las=2)
barplot(varImp.df$Overall, names.arg=rownames(varImp.df), las=2, col="blue")
# Plot feature importance
varImp.df <- data.frame(varImp(rf.model))
varImp.df$Overall <- varImp.df[order(varImp.df$Overall, decreasing = FALSE),]
par(mar=c(15,3,3,0))
barplot(varImp.df$Overall, names.arg=rownames(varImp.df), las=2, col="blue")
barplot(varImp.df$Overall, names.arg=rownames(varImp.df), las=2, col="blue", main="Random Forest: Feature Importances")
# Plot feature importance
varImp.df <- data.frame(varImp(rf.model))
varImp.df$Overall <- varImp.df[order(varImp.df$Overall, decreasing = FALSE),]
par(mar=c(15,3,3,0))
barplot(varImp.df$Overall, names.arg=rownames(varImp.df), las=2, col="blue", main="Random Forest: Feature Importances")
# Macro average of Positive Predicted Value for various algorithms
macro.avg.ppv <- data.frame(colMeans(pvv.df[sapply(pvv.df, is.numeric)]))
names(macro.avg.ppv) <- c("Positive.Predicted.Value")
macro.avg.ppv
macro.avg.ppv$Positive.Predicted.Value <- macro.avg.ppv[order(macro.avg.ppv$Positive.Predicted.Value, decreasing=TRUE),]
barplot(macro.avg.ppv$Positive.Predicted.Value, names.arg = row.names(macro.avg.ppv))
macro.avg.ppv$Positive.Predicted.Value <- macro.avg.ppv[order(macro.avg.ppv$Positive.Predicted.Value, decreasing=TRUE),]
barplot(macro.avg.ppv$Positive.Predicted.Value, names.arg = row.names(macro.avg.ppv), las=2)
barplot(macro.avg.ppv$Positive.Predicted.Value, names.arg = row.names(macro.avg.ppv), las=2, col="orange")
macro.avg.ppv$Positive.Predicted.Value <- macro.avg.ppv[order(macro.avg.ppv$Positive.Predicted.Value, decreasing=TRUE),]
barplot(macro.avg.ppv$Positive.Predicted.Value, names.arg = row.names(macro.avg.ppv), las=2, col="orange")
par(mar=c(15,3,3,0))
macro.avg.ppv$Positive.Predicted.Value <- macro.avg.ppv[order(macro.avg.ppv$Positive.Predicted.Value, decreasing=TRUE),]
par(mar=c(15,3,3,0))
barplot(macro.avg.ppv$Positive.Predicted.Value, names.arg = row.names(macro.avg.ppv), las=2, col="orange")
macro.avg.ppv$Positive.Predicted.Value <- macro.avg.ppv[order(macro.avg.ppv$Positive.Predicted.Value, decreasing=TRUE),]
par(mar=c(12,3,3,0))
barplot(macro.avg.ppv$Positive.Predicted.Value, names.arg = row.names(macro.avg.ppv), las=2, col="orange")
macro.avg.ppv$Positive.Predicted.Value <- macro.avg.ppv[order(macro.avg.ppv$Positive.Predicted.Value, decreasing=TRUE),]
par(mar=c(10,3,3,0))
barplot(macro.avg.ppv$Positive.Predicted.Value, names.arg = row.names(macro.avg.ppv), las=2, col="orange")
macro.avg.ppv$Positive.Predicted.Value <- macro.avg.ppv[order(macro.avg.ppv$Positive.Predicted.Value, decreasing=TRUE),]
par(mar=c(12,3,3,0))
barplot(macro.avg.ppv$Positive.Predicted.Value, names.arg = row.names(macro.avg.ppv), las=2, col="orange")
text(x = map.barplot, y = macro.avg.ppv$Positive.Predicted.Value, label = macro.avg.ppv$Positive.Predicted.Value, pos = 3, cex = 0.8)
macro.avg.ppv$Positive.Predicted.Value <- macro.avg.ppv[order(macro.avg.ppv$Positive.Predicted.Value, decreasing=TRUE),]
par(mar=c(12,3,3,0))
map.barplot <- barplot(macro.avg.ppv$Positive.Predicted.Value, names.arg = row.names(macro.avg.ppv), las=2, col="orange")
text(x = map.barplot, y = macro.avg.ppv$Positive.Predicted.Value, label = macro.avg.ppv$Positive.Predicted.Value, pos = 3, cex = 0.8)
text(x = map.barplot, y = macro.avg.ppv$Positive.Predicted.Value, label = macro.avg.ppv$Positive.Predicted.Value)
macro.avg.ppv$Positive.Predicted.Value <- macro.avg.ppv[order(macro.avg.ppv$Positive.Predicted.Value, decreasing=TRUE),]
par(mar=c(12,3,3,0))
map.barplot <- barplot(macro.avg.ppv$Positive.Predicted.Value, names.arg = row.names(macro.avg.ppv), las=2, col="orange")
text(x = map.barplot, y = macro.avg.ppv$Positive.Predicted.Value, label = macro.avg.ppv$Positive.Predicted.Value)
macro.avg.ppv$Positive.Predicted.Value <- macro.avg.ppv[order(macro.avg.ppv$Positive.Predicted.Value, decreasing=TRUE),]
par(mar=c(12,3,3,0))
map.barplot <- barplot(macro.avg.ppv$Positive.Predicted.Value, names.arg = row.names(macro.avg.ppv), las=2, col="orange")
text(x = map.barplot, y = macro.avg.ppv$Positive.Predicted.Value, label = macro.avg.ppv$Positive.Predicted.Value, pos=3)
macro.avg.ppv$Positive.Predicted.Value <- macro.avg.ppv[order(macro.avg.ppv$Positive.Predicted.Value, decreasing=TRUE),]
par(mar=c(14,3,3,0))
map.barplot <- barplot(macro.avg.ppv$Positive.Predicted.Value, names.arg = row.names(macro.avg.ppv), las=2, col="orange")
text(x = map.barplot, y = macro.avg.ppv$Positive.Predicted.Value, label = macro.avg.ppv$Positive.Predicted.Value, pos=3)
macro.avg.ppv$Positive.Predicted.Value <- macro.avg.ppv[order(macro.avg.ppv$Positive.Predicted.Value, decreasing=TRUE),]
par(mar=c(12,3,3,0))
map.barplot <- barplot(macro.avg.ppv$Positive.Predicted.Value, names.arg = row.names(macro.avg.ppv), las=2, col="orange")
text(x = map.barplot, y = macro.avg.ppv$Positive.Predicted.Value, label = macro.avg.ppv$Positive.Predicted.Value, pos=3)
macro.avg.ppv$Positive.Predicted.Value <- macro.avg.ppv[order(macro.avg.ppv$Positive.Predicted.Value, decreasing=TRUE),]
par(mar=c(12,3,3,2))
map.barplot <- barplot(macro.avg.ppv$Positive.Predicted.Value, names.arg = row.names(macro.avg.ppv), las=2, col="orange")
text(x = map.barplot, y = macro.avg.ppv$Positive.Predicted.Value, label = macro.avg.ppv$Positive.Predicted.Value, pos=3)
macro.avg.ppv$Positive.Predicted.Value <- macro.avg.ppv[order(macro.avg.ppv$Positive.Predicted.Value, decreasing=TRUE),]
par(mar=c(12,3,3,5))
map.barplot <- barplot(macro.avg.ppv$Positive.Predicted.Value, names.arg = row.names(macro.avg.ppv), las=2, col="orange")
text(x = map.barplot, y = macro.avg.ppv$Positive.Predicted.Value, label = macro.avg.ppv$Positive.Predicted.Value, pos=3)
macro.avg.ppv$Positive.Predicted.Value <- macro.avg.ppv[order(macro.avg.ppv$Positive.Predicted.Value, decreasing=TRUE),]
par(mar=c(12,3,3,3))
map.barplot <- barplot(macro.avg.ppv$Positive.Predicted.Value, names.arg = row.names(macro.avg.ppv), las=2, col="orange")
text(x = map.barplot, y = macro.avg.ppv$Positive.Predicted.Value, label = macro.avg.ppv$Positive.Predicted.Value, pos=3)
macro.avg.ppv$Positive.Predicted.Value <- macro.avg.ppv[order(macro.avg.ppv$Positive.Predicted.Value, decreasing=TRUE),]
par(mar=c(12,3,3,2))
map.barplot <- barplot(macro.avg.ppv$Positive.Predicted.Value, names.arg = row.names(macro.avg.ppv), las=2, col="orange")
text(x = map.barplot, y = macro.avg.ppv$Positive.Predicted.Value, label = macro.avg.ppv$Positive.Predicted.Value, pos=3)
macro.avg.ppv$Positive.Predicted.Value <- macro.avg.ppv[order(macro.avg.ppv$Positive.Predicted.Value, decreasing=TRUE),]
par(mar=c(12,3,3,0))
map.barplot <- barplot(macro.avg.ppv$Positive.Predicted.Value, names.arg = row.names(macro.avg.ppv), las=2, col="orange")
text(x = map.barplot, y = macro.avg.ppv$Positive.Predicted.Value, label = macro.avg.ppv$Positive.Predicted.Value, pos=3)
macro.avg.ppv$Positive.Predicted.Value <- macro.avg.ppv[order(macro.avg.ppv$Positive.Predicted.Value, decreasing=TRUE),]
par(mar=c(12,3,5,0))
map.barplot <- barplot(macro.avg.ppv$Positive.Predicted.Value, names.arg = row.names(macro.avg.ppv), las=2, col="orange")
text(x = map.barplot, y = macro.avg.ppv$Positive.Predicted.Value, label = macro.avg.ppv$Positive.Predicted.Value, pos=3)
macro.avg.ppv$Positive.Predicted.Value <- macro.avg.ppv[order(macro.avg.ppv$Positive.Predicted.Value, decreasing=TRUE),]
par(mar=c(12,3,7,0))
map.barplot <- barplot(macro.avg.ppv$Positive.Predicted.Value, names.arg = row.names(macro.avg.ppv), las=2, col="orange")
text(x = map.barplot, y = macro.avg.ppv$Positive.Predicted.Value, label = macro.avg.ppv$Positive.Predicted.Value, pos=3)
map.barplot <- barplot(macro.avg.ppv$Positive.Predicted.Value, names.arg = row.names(macro.avg.ppv), las=2, col="orange", horiz = TRUE)
macro.avg.ppv$Positive.Predicted.Value <- macro.avg.ppv[order(macro.avg.ppv$Positive.Predicted.Value, decreasing=TRUE),]
par(mar=c(12,3,3,0))
map.barplot <- barplot(macro.avg.ppv$Positive.Predicted.Value, names.arg = row.names(macro.avg.ppv), las=2, col="orange", horiz = TRUE)
text(x = map.barplot, y = macro.avg.ppv$Positive.Predicted.Value, label = macro.avg.ppv$Positive.Predicted.Value, pos=3)
macro.avg.ppv$Positive.Predicted.Value <- macro.avg.ppv[order(macro.avg.ppv$Positive.Predicted.Value, decreasing=TRUE),]
par(mar=c(3,5,3,0))
map.barplot <- barplot(macro.avg.ppv$Positive.Predicted.Value, names.arg = row.names(macro.avg.ppv), las=2, col="orange", horiz = TRUE)
text(x = map.barplot, y = macro.avg.ppv$Positive.Predicted.Value, label = macro.avg.ppv$Positive.Predicted.Value, pos=3)
macro.avg.ppv$Positive.Predicted.Value <- macro.avg.ppv[order(macro.avg.ppv$Positive.Predicted.Value, decreasing=TRUE),]
par(mar=c(3,10,3,0))
map.barplot <- barplot(macro.avg.ppv$Positive.Predicted.Value, names.arg = row.names(macro.avg.ppv), las=2, col="orange", horiz = TRUE)
text(x = map.barplot, y = macro.avg.ppv$Positive.Predicted.Value, label = macro.avg.ppv$Positive.Predicted.Value, pos=3)
macro.avg.ppv$Positive.Predicted.Value <- macro.avg.ppv[order(macro.avg.ppv$Positive.Predicted.Value, decreasing=TRUE),]
par(mar=c(3,10,3,0))
map.barplot <- barplot(macro.avg.ppv$Positive.Predicted.Value, names.arg = row.names(macro.avg.ppv), las=2, col="orange", horiz = TRUE)
text(x = map.barplot, x = macro.avg.ppv$Positive.Predicted.Value, label = macro.avg.ppv$Positive.Predicted.Value, pos=3)
macro.avg.ppv$Positive.Predicted.Value <- macro.avg.ppv[order(macro.avg.ppv$Positive.Predicted.Value, decreasing=TRUE),]
par(mar=c(3,10,3,0))
map.barplot <- barplot(macro.avg.ppv$Positive.Predicted.Value, names.arg = row.names(macro.avg.ppv), las=2, col="orange", horiz = TRUE)
text(y = map.barplot, x = macro.avg.ppv$Positive.Predicted.Value, label = macro.avg.ppv$Positive.Predicted.Value, pos=3)
macro.avg.ppv$Positive.Predicted.Value <- macro.avg.ppv[order(macro.avg.ppv$Positive.Predicted.Value, decreasing=TRUE),]
par(mar=c(3,12,3,0))
map.barplot <- barplot(macro.avg.ppv$Positive.Predicted.Value, names.arg = row.names(macro.avg.ppv), las=2, col="orange", horiz = TRUE)
text(y = map.barplot, x = macro.avg.ppv$Positive.Predicted.Value, label = macro.avg.ppv$Positive.Predicted.Value, pos=3)
macro.avg.ppv$Positive.Predicted.Value <- macro.avg.ppv[order(macro.avg.ppv$Positive.Predicted.Value, decreasing=TRUE),]
par(mar=c(3,12,3,0))
map.barplot <- barplot(macro.avg.ppv$Positive.Predicted.Value, names.arg = row.names(macro.avg.ppv), las=2, col="orange", horiz = TRUE)
text(y = map.barplot, x = macro.avg.ppv$Positive.Predicted.Value, label = macro.avg.ppv$Positive.Predicted.Value, pos=7)
macro.avg.ppv$Positive.Predicted.Value <- macro.avg.ppv[order(macro.avg.ppv$Positive.Predicted.Value, decreasing=TRUE),]
par(mar=c(3,12,3,0))
map.barplot <- barplot(macro.avg.ppv$Positive.Predicted.Value, names.arg = row.names(macro.avg.ppv), las=2, col="orange", horiz = TRUE)
text(y = map.barplot, x = macro.avg.ppv$Positive.Predicted.Value, label = macro.avg.ppv$Positive.Predicted.Value, pos=5)
macro.avg.ppv$Positive.Predicted.Value <- macro.avg.ppv[order(macro.avg.ppv$Positive.Predicted.Value, decreasing=TRUE),]
par(mar=c(3,12,3,0))
map.barplot <- barplot(macro.avg.ppv$Positive.Predicted.Value, names.arg = row.names(macro.avg.ppv), las=2, col="orange", horiz = TRUE)
text(y = map.barplot, x = macro.avg.ppv$Positive.Predicted.Value, label = macro.avg.ppv$Positive.Predicted.Value, pos=3)
macro.avg.ppv$Positive.Predicted.Value <- macro.avg.ppv[order(macro.avg.ppv$Positive.Predicted.Value, decreasing=TRUE),]
par(mar=c(3,12,3,0))
map.barplot <- barplot(macro.avg.ppv$Positive.Predicted.Value, names.arg = row.names(macro.avg.ppv), las=2, col="orange", horiz = TRUE)
text(y = map.barplot, x = macro.avg.ppv$Positive.Predicted.Value, label = macro.avg.ppv$Positive.Predicted.Value, cex=0.8)
text(y = map.barplot, x = macro.avg.ppv$Positive.Predicted.Value, label = macro.avg.ppv$Positive.Predicted.Value, pos=3, cex=0.8)
macro.avg.ppv$Positive.Predicted.Value <- macro.avg.ppv[order(macro.avg.ppv$Positive.Predicted.Value, decreasing=TRUE),]
par(mar=c(3,12,3,0))
map.barplot <- barplot(macro.avg.ppv$Positive.Predicted.Value, names.arg = row.names(macro.avg.ppv), las=2, col="orange", horiz = TRUE)
text(y = map.barplot, x = macro.avg.ppv$Positive.Predicted.Value, label = macro.avg.ppv$Positive.Predicted.Value, pos=3, cex=0.8)
macro.avg.ppv$Positive.Predicted.Value <- macro.avg.ppv[order(macro.avg.ppv$Positive.Predicted.Value, decreasing=TRUE),]
par(mar=c(3,12,3,0))
map.barplot <- barplot(macro.avg.ppv$Positive.Predicted.Value, names.arg = row.names(macro.avg.ppv), las=2, col="orange", horiz = TRUE)
text(y = map.barplot, x = macro.avg.ppv$Positive.Predicted.Value, label = macro.avg.ppv$Positive.Predicted.Value, pos=1, cex=0.8)
macro.avg.ppv$Positive.Predicted.Value <- macro.avg.ppv[order(macro.avg.ppv$Positive.Predicted.Value, decreasing=TRUE),]
par(mar=c(3,12,3,0))
map.barplot <- barplot(macro.avg.ppv$Positive.Predicted.Value, names.arg = row.names(macro.avg.ppv), las=2, col="orange", horiz = TRUE)
text(y = map.barplot, x = macro.avg.ppv$Positive.Predicted.Value, label = macro.avg.ppv$Positive.Predicted.Value, pos=4, cex=0.8)
macro.avg.ppv$Positive.Predicted.Value <- macro.avg.ppv[order(macro.avg.ppv$Positive.Predicted.Value, decreasing=TRUE),]
par(mar=c(3,12,3,0))
map.barplot <- barplot(macro.avg.ppv$Positive.Predicted.Value, names.arg = row.names(macro.avg.ppv), las=2, col="orange", horiz = TRUE)
text(y = map.barplot, x = macro.avg.ppv$Positive.Predicted.Value, label = macro.avg.ppv$Positive.Predicted.Value, pos=5, cex=0.8)
macro.avg.ppv$Positive.Predicted.Value <- macro.avg.ppv[order(macro.avg.ppv$Positive.Predicted.Value, decreasing=TRUE),]
par(mar=c(3,12,3,0))
map.barplot <- barplot(macro.avg.ppv$Positive.Predicted.Value, names.arg = row.names(macro.avg.ppv), las=2, col="orange", horiz = TRUE)
text(y = map.barplot, x = macro.avg.ppv$Positive.Predicted.Value, label = macro.avg.ppv$Positive.Predicted.Value, pos=3, cex=0.8)
macro.avg.ppv$Positive.Predicted.Value <- macro.avg.ppv[order(macro.avg.ppv$Positive.Predicted.Value, decreasing=TRUE),]
par(mar=c(3,12,3,0))
map.barplot <- barplot(macro.avg.ppv$Positive.Predicted.Value, names.arg = row.names(macro.avg.ppv), las=2, col="orange", horiz = TRUE)
text(y = map.barplot, x = macro.avg.ppv$Positive.Predicted.Value, label = macro.avg.ppv$Positive.Predicted.Value, pos=2, cex=0.8)
macro.avg.ppv$Positive.Predicted.Value <- macro.avg.ppv[order(macro.avg.ppv$Positive.Predicted.Value, decreasing=TRUE),]
par(mar=c(3,12,3,0))
map.barplot <- barplot(macro.avg.ppv$Positive.Predicted.Value, names.arg = row.names(macro.avg.ppv), las=2, col="orange", horiz = TRUE, main="Postive Predicted Value by Algorithms")
text(y = map.barplot, x = macro.avg.ppv$Positive.Predicted.Value, label = macro.avg.ppv$Positive.Predicted.Value, pos=2, cex=0.8)
acc.barplot <- barplot(acc.df$Accuracy, names.arg = row.names(acc.df), las=2, col="red", horiz = TRUE, main="Accuracy Values by Algorithms")
acc.df$Accuracy <- acc.df[order(acc.df$Accuracy, decreasing = TRUE),]
par(mar=c(3,12,3,0))
acc.barplot <- barplot(acc.df$Accuracy, names.arg = row.names(acc.df), las=2, col="red", horiz = TRUE, main="Accuracy Values by Algorithms")
acc.df
# Load the result data
acc.df <- read.csv("./../data/classification_data/output/result_acc.csv")
pvv.df <- read.csv("./../data/classification_data/output/result_pvv.csv")
acc.df$Accuracy <- acc.df[order(acc.df$Accuracy, decreasing = TRUE),]
acc.df
# Load the result data
acc.df <- read.csv("./../data/classification_data/output/result_acc.csv")
pvv.df <- read.csv("./../data/classification_data/output/result_pvv.csv")
acc.df<- acc.df[order(acc.df$Accuracy, decreasing = TRUE),]
acc.df
acc.barplot <- barplot(acc.df$Accuracy, names.arg = acc.df$Algorithm, las=2, col="red", horiz = TRUE, main="Accuracy Values by Algorithms")
acc.df<- acc.df[order(acc.df$Accuracy, decreasing = TRUE),]
par(mar=c(3,12,3,0))
acc.barplot <- barplot(acc.df$Accuracy, names.arg = acc.df$Algorithm, las=2, col="red", horiz = TRUE, main="Accuracy Values by Algorithms")
kappa.df<- acc.df[order(acc.df$Kappa, decreasing = TRUE),]
par(mar=c(3,12,3,0))
acc.barplot <- barplot(kappa.df$Kappa, names.arg = kappa.df$Algorithm, las=2, col="green", horiz = TRUE, main="Kappa Values by Algorithms")
kappa.df<- acc.df[order(acc.df$Kappa, decreasing = TRUE),]
par(mar=c(3,12,3,0))
acc.barplot <- barplot(kappa.df$Kappa, names.arg = kappa.df$Algorithm, las=2, col="darkgreen", horiz = TRUE, main="Kappa Values by Algorithms")
